#! /usr/bin/perl

# Create a boot image and put everything on it.
#
# Source files and the file list are taken from data/boot; the image is
# stored in images/boot.
#
# Usage:        mk_boot

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
BEGIN { unshift @INC, ( $0 =~ /(.*?)((?<![^\/])bin\/)?[^\/]+$/ )[0] . "lib" }
use ReadConfig;
use AddFiles;
use MakeFATImage;
use MakeFATImage2;
use integer;

sub dir_size;
sub _dir_sort;
sub dir_sort;

die "usage: $Script\n" if @ARGV;


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# some config data

$srcdir = "${DataPath}boot";
$tmpdir = "${BasePath}tmp";
$tmpbootdir = "${BasePath}tmp/boot";
$image = "${ImagePath}boot";
$initrddir = "$tmpdir/initrd";
$initdisk = "${ImagePath}initrd";
$initrdondisk = "initrd";
$arch = $ConfigData{arch};

$image .= ".$ENV{'boot'}" if defined $ENV{'boot'};

$initdisk = "${ImagePath}$ENV{'initrd_name'}" if $ENV{'initrd_name'};
$initrdondisk = $ENV{'initrd_name'} if $ENV{'initrd_name'};

$initrdondisk = "efi/boot/$initrdondisk" if $arch eq 'ia64';

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# mbr boot program (ia32 only)
$mboot_file = "${BasePath}src/mboot/mboot";

$ia32_like = $arch =~ /^i\d86$/ || $arch eq 'x86_64';

$fstype = $ia32_like ? 'msdos' : 'vfat';

# clean up
if(-d($tmpbootdir)) {
  SUSystem "rm -rf $tmpbootdir" and die "$Script: failed to remove old $tmpbootdir";
}

mkdir $tmpdir || die "$Script: failed to create $tmpdir";


if($ia32_like) {
  if($ENV{'syslinux'}) {
    $syslx = $ENV{'syslinux'};
  } else {
    $syslx = "${BasePath}tmp/base/usr/bin/syslinux"
  }
  die "$Script: where is syslinux?" unless -x $syslx;
}

# print STDERR "syslinux = $syslx\n";

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# now we really start...

# clean up
if(-e $image) {
  SUSystem "rm -rf $image\{,\[0-9\]\}" and die "$Script: failed to remove old $image";
}

# copy everything except initrd
AddFiles $tmpbootdir, "${srcdir}/boot.file_list", $srcdir or
  die "$Script: failed to setup boot image";

# add initrd
SUSystem "cp $initdisk $tmpbootdir/$initrdondisk" and
  die "$Script: could not add $initdisk to the image";

if($ENV{theme} eq 'Zen') {
  SUSystem "sh -c 'cat $tmpbootdir/08000600.spl >>$tmpbootdir/$initrdondisk' ; rm -f $tmpbootdir/*.spl" and
    die "$Script: could not add slpash to initrd";
}

# create empty image
if($ENV{'boot'} eq 'small') {
  # minimum estimate
  $est = dir_size($tmpbootdir, 2048) / 720 + 1;

  for($i = $est; $i < $est + 10; $i++) {	# max 10 tries
    ($blocks, $block_size) = MakeFATImage2($image, $i);
    # print "$i: $est, $blocks, $block_size\n";

    $dir_size = dir_size($tmpbootdir, $block_size);
    # print "$blocks, $dir_size\n";
    if($blocks >= $dir_size) {
      $boot_disks = $i;
      last;
    }
    undef $blocks;
  }
}
elsif($ENV{'boot'} eq 'medium') {
  ($blocks, $block_size) = MakeFATImage($image, "BOOTCD2", 2, 36);
  $dir_size = dir_size($tmpbootdir, $block_size);
  if($blocks < $dir_size) {
    $i = ($blocks * $block_size) >> 10;
    $j = ($dir_size * $block_size) >> 10;
    die "$Script: image too small (${i}k instead of ${j}k)"
  }
}
elsif($ENV{'boot'} eq 'hd') {
  # minimum estimate
  $est = dir_size($tmpbootdir, 1024) / 126 + 1 + 1;

  for($i = $est; $i < $est + 10; $i++) {	# max 10 tries
    ($blocks, $block_size) = MakeFATImage($image, "BOOTCD1", 2, 63, 4, $i, "$image.mbr", $mboot_file);
    # print "$i: $est, $blocks, $block_size\n";

    $dir_size = dir_size($tmpbootdir, $block_size);
    # print "$blocks, $dir_size\n";
    last if $blocks >= $dir_size;
    undef $blocks;
  }
}
elsif($ENV{'boot'} eq 'large' || ($arch eq 'ia64' && !$ENV{'boot'})) {
  # minimum estimate
  $est = dir_size($tmpbootdir, 1024) / 504 + 1;

  for($i = $est; $i < $est + 10; $i++) {	# max 10 tries
    ($blocks, $block_size) = MakeFATImage($image, "BOOTCD1", 2, 63, 16, $i);
    # print "$i: $est, $blocks, $block_size\n";

    $dir_size = dir_size($tmpbootdir, $block_size);
    # print "$blocks, $dir_size\n";
    last if $blocks >= $dir_size;
    undef $blocks;
  }
}
elsif($ENV{'boot'} eq 'isolinux') {
  mkdir $image;
  system "cp -r $tmpbootdir/* $image" and
    die "$Script: failed to setup boot image";

  system "unpack_bootlogo $image" and
    die "$Script: failed to unpack bootlogo";

  print "contents of $image:\n";
  system "ls -l $image";

  exit;
}
else {
  die "$Script: no valid boot image type specified (via 'boot' env)\n"
}

die "$Script: failed to create FAT disk image \"$image\"\n" unless defined $blocks;

printf "$Script: image \"%s\", %u blocks a %u bytes (%u total)\n", $image, $blocks, $block_size, $blocks * $block_size;

# make it bootable and add syslinux
if($ia32_like) {
  $xx = "-s" if $ENV{boot} eq 'small' && !$ENV{fastboot};
  SUSystem "$syslx $xx $image" and
    die "$Script: syslinux failed";
}

# umount it first, just in case
SUSystem "umount /mnt 2>/dev/null";

# add the other files
SUSystem "mount -oloop -t $fstype $image /mnt" and
  die "$Script: mount failed";

SUSystem "cp -r $tmpbootdir/${\dir_sort $tmpbootdir} /mnt" and do {
  SUSystem "umount /mnt";
  die "$Script: failed to setup boot image";
};

if(-f '/mnt/readme.txt') {
  SUSystem "touch -r /mnt/readme.txt /mnt/*";
}

print "contents of $image:\n";
system "ls -lRU /mnt";

SUSystem "umount /mnt" and
  die "$Script: umount failed";

if($ia32_like) {
  Print2File $MToolsCfg, "drive r: file=\"$image\"\n" or die "$Script: oops!";
  @f = `mdir r:`;
  unlink $MToolsCfg;

  for (@f) {
    if(/^\s*([ 0-9]+?)\s+bytes\s+free\s*$/) {
      $xfree = $1;
      $xfree =~ s/\s+//g;
      last;
    }
  }
}


if($ENV{'boot'} eq 'small') {
  open F, $image;
  for($i = 0; $i < $boot_disks; $i++) {
    sysread F, $buf, 1440*1024;
    open W, ">$image${\($i + 1)}";
    syswrite W, $buf;
    close W;
  }
  close F;
}


if($ENV{'boot'} eq 'hd') {
  my $lo;

  $lo = -s "$image.mbr";
  system "cat $image >>$image.mbr";
  system "mv $image.mbr $image";

   print "$Script: finished boot image \"$image\" (offset $lo)";
}
else {
  print "$Script: finished boot image \"$image\"";
  print " ($boot_disks disks)" if $boot_disks;
}

print defined($xfree) ? "; $xfree bytes free\n" : "\n";


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
sub dir_size
{
  my ($i, $size);
  my ($dir, $block_size) = @_;

  for $i (<$dir/*>) {
    next if -l $i;
    next if $i =~ m|/\.\.?$|;
    $size += dir_size($i, $block_size) if -d $i;
    $size += ((-s $i) + $block_size - 1) / $block_size if -f $i;
  }

  return $size;
}


# secial sorting
sub _dir_sort
{
  my ($w, $i, $p);

  $p = 2;
  for $i (
    '\.spl$', '^initrd$', '^linux$', '^memtest$',
    '^bootlogo$', '^message$', '\.cfg$'
  ) {
    $w -= $p if $a =~ /$i/;
    $w += $p if $b =~ /$i/;
    $p <<= 1;
  }

  return $w + ($a cmp $b);
}


sub dir_sort
{
  my ($i, $size, @dir);

  opendir D, shift;
  @dir = grep { !/^\./ } readdir D;
  closedir D;

  my $files = join(',', sort(_dir_sort @dir));
  $files = "{".$files."}" if ($files =~ /,/);
  return $files;
}

