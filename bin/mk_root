#! /usr/bin/perl

# Create a root image that can be used on a bootable CD.
#
# Source files and the file list are taken from data/root; the final
# image is stored in images/root.
#
# Usage:        mk_root

=head1 mk_root

C<mk_root> creates a C<root> image (not compressed).
This image is intended to go onto a bootable CD.

The files to go into the root image are taken from
C<data/root/root.file_list>.

The final image is stored as C<images/root>.

=cut


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# the usual fuss...

BEGIN { unshift @INC, ( $0 =~ /(.*?)((?<![^\/])bin\/)?[^\/]+$/ )[0] . "lib" }
use ReadConfig;
use MakeExt2Image;
use AddFiles;
use Conv2Image;
use CompressImage;

die "usage: $Script\n" if @ARGV;


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# some config data

$srcdir = "${DataPath}root";
$tmpdir = "${BasePath}tmp/root";
# $tmpinitrd = "${BasePath}tmp/initrd";
$image = "${ImagePath}root";

# leave that much space
$extra_size = 1000;              # kbyte
$extra_inodes = 200;

# just make them large enough
$start_size = 170000;             # kbyte
$start_inodes = 7000;

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# now we really start...

$debug = exists($ENV{'debug'}) ?  $ENV{'debug'} : "";
$use_cramfs = exists($ENV{'use_cramfs'}) ? $ENV{'use_cramfs'} : 1;
$uncompressed_root = exists($ENV{'uncompressed_root'}) ? $ENV{'uncompressed_root'} : "";

if($ENV{theme} eq 'Zen') {
  $extra_size = 20000;              # kbyte
  $extra_inodes = 10000;
}


if($ENV{'keeproot'} != 1) {
  # clean up
  if(-d($tmpdir)) {
    SUSystem "rm -rf $tmpdir" and die "$Script: failed to remove old $tmpdir";
  }

  mkdir $tmpdir || die "$Script: failed to create $tmpdir";

  $fl = exists($ENV{'filelist'}) ? $ENV{'filelist'} : "root";

  AddFiles $tmpdir, "${srcdir}/$fl.file_list", $srcdir or
    die "$Script: failed to setup root image";

  if(-f "${BasePath}tmp/root.rpmlog") {
    SUSystem "perl -pe 's/\\[(.*?)\\].*/\$1/' ${BasePath}tmp/root.rpmlog | sort >$tmpdir/.packages";
  }

#  print "fix locale...\n";
#  SUSystem "fix_locale $tmpdir";
  print "fix permissions of directories...\n";
  SUSystem "fix_perms $tmpdir";
  print "strip everything...\n";
  SUSystem "strip_dir $tmpdir";

  print "running ldconfig...";
  SUSystem "ldconfig -r $tmpdir";
  die "$Script: failed to run ldconfig" unless -f "$tmpdir/etc/ld.so.cache";

  if($debug =~ /\bignore\b/ || $debug =~ /\bignorelibs\b/) {
    system "check_libs $tmpdir" and
      warn "$Script: error in shared lib config, please fix\n";
  }
  else {
    system "check_libs $tmpdir" and
      die "$Script: error in shared lib config, please fix\n";
  }

#  if(!exists($ENV{'with_yast2'}) || $ENV{'with_yast2'} ne 'no') {
#    if($debug =~ /\bignore\b/) {
#      system "yast2-deps" and
#        warn "$Script: error in yast2 package list, please fix\n";
#    }
#    else {
#      system "yast2-deps" and
#        die "$Script: error in yast2 package list, please fix\n";
#    }
#  }

}

if($use_cramfs) {
  Conv2Image $image, $tmpdir, 'cramfs';
  die "$Script: $!" unless rename $image, "$image.cramfs";
  $i = -s "$image.cramfs";
  print "$Script: created \"$image.cramfs\" ($i bytes)\n";
}

if($uncompressed_root || !$use_cramfs) {
  Conv2Image $image, $tmpdir, 'ext2', $start_size, $start_inodes, $extra_size, $extra_inodes;
  if(!$uncompressed_root) {
    $i = CompressImage $image;
    print "$Script: created \"$image\" ($i bytes)\n";
  }
}

