#! /usr/bin/perl

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# the usual fuss...

BEGIN { unshift @INC, ( $0 =~ /(.*?)((?<![^\/])bin\/)?[^\/]+$/ )[0] . "lib" }
use ReadConfig;
use MakeExt2Image;
use AddFiles;
use Conv2Image;

sub check_deps;
sub sort_deps;

die "usage: $Script\n" if @ARGV;

$md = "${BasePath}tmp/modules-config/modules.dep";
$ex = "${CfgPath}module.list";
$deps = "${BasePath}tmp/modules-config/module_deps";
$list = "${BasePath}tmp/modules-config/module_list";
$mod_type = $ConfigData{module_type};

$arch = `uname -m`; chomp $arch; $arch = "i386" if $arch =~ /^i\d86$/;

print STDERR "checking module list...\n";

die "$0: $md: $!\n" unless open F, $md;

while(<F>) {
  chomp;
  next if /^\s*$/;
  $cnt_next = s/\\$/ / ? 1 : 0;
  if($cnt) {
    @ml[-1] .= $_;
  }
  else {
    push @ml, $_;
  }
  $cnt = $cnt_next;
}

close F;

die "$0: $ex: $!\n" unless open(F, "$ex.$arch") || open(F, $ex);

while(<F>) {
  s/\s*$//;
  next if /^\s*(#|$)/;

  if(s/^\-//) {
    push @ex_no, $_;
  }
  else {
    push @ex_yes, $_;
  }
}

close F;

if(@ex_no != 0) {
 $ex_no = join '|', @ex_no;
}

if(@ex_yes != 0) {
 $ex_yes = join '|', @ex_yes;
}

for (@ml) {
  s#^/lib/modules/[^/]+/##;
  if(/^(\S+):/) {
    $m = $1;
    $_ = "" if $ex_yes && $m !~ /($ex_yes)/;
    $_ = "" if $ex_no && $m =~ /($ex_no)/;
  }

  s#^(\S+)/##;
  $p = $1;
  s#\s\S+/# #g;
  s/\.$mod_type\b//g;
  s/\s+/ /g;
  s/\s+$//;

  if(/^(\S+):/) {
    $path{$1} = $p unless exists $path{$1}
  }

  $_ = "$p $_" if $_;
}
@ml = grep $_ ne "", @ml;

for (@ml) {
  if(/^(\S+)\s+(\S+):\s*(.*?)$/) {
    $p = $1;
    if(exists $ml{$2}) {
      print STDERR "  duplicate module: $p/$2, $path{$2}/$2\n"
    }
    $ml{$2} = $3;
  }
  else {
    die "$0: oops: invalid line: \"$_\"\n"
  }
}

while(check_deps) {}

sort_deps;

open W1, ">$deps";
open W2, ">$list";
for (sort { "$path{$a} $a" cmp "$path{$b} $b" } keys %ml) {
  print W2 "$path{$_}: $_\n";
  if($ml{$_}) {
    print W1 "$_: ", $ml{$_}, "\n"
  }
  else {
    print W1 "$_:\n"
  }
}
close W2;
close W1;

sub check_deps
{
  local $_;
  my ($i, $cnt);

  for (keys %ml) {
    if($ml{$_}) {
      for $i (split ' ', $ml{$_}) {
        if(!exists $ml{$i}) {
          print STDERR "  unresolved deps in $_: $i, dropped\n";
          delete $ml{$_};
          $cnt++;
        }
      }
    }
  }

  return $cnt;
}


sub sort_deps
{
  local $_;
  my ($m);

  for $m (keys %ml) {
    $ml2{$m}{$_} = 10 for split ' ', $ml{$m};
  }

  for $m (keys %ml) {
    $ml{$m} = join(' ', (sort { ($ml2{$a}{$b} - $ml2{$b}{$a}) + ($a cmp $b) }  split(' ', $ml{$m})));
  }
}

