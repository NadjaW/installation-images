#! /usr/bin/perl

sub calc_sizes;

@good_ids{( 1, 4, 6, 0xb, 0xc, 0xe, 0x11, 0x14, 0x16, 0x1b, 0x1c, 0x1e, 0x83 )} = ();
@dos_ids{( 1, 4, 6, 0xb, 0xc, 0xe )} = ();
$minsize = 100;		# *NOT* below ca. 30
$img = "suselive.800";
$swap = "suselive.swp";
$home = "suselive.usr";

exit unless $ARGV[0] =~ /^\//;

for (`LANG= fdisk -l $ARGV[0] 2>/dev/null`) {
  chomp;
  if(/^(\/\S+)(\s|\*)+(\d+)\s+(\d+)\s+(\d+)(\s|\+)+([0-9a-fA-F]+)\s+(.+)/) {
    if($5 >= $minsize) {
      $id = hex $7;
      if(exists $good_ids{$id}) {
#        printf "%s %9d 0x%02x <%s>\n", $1, $5, $id, $8;
        push @parts, $1;
        push @fsid, $id;
        push @fstypes, $8;
      }
    }
  }
}

undef $is_c;
for ($i = 0; $i < @parts; $i++) {
  if($parts[$i] =~ /(\d+)$/ && $1 >= 1 && $1 <= 4 && exists($dos_ids{$fsid[$i]})) {
    $is_c = $i; last
  }
}

# first C:
if(defined $is_c) {
#  print "C: $parts[$is_c]\n";
  push @xx, $is_c; $xx{$is_c} = 1;
}

# then all other DOS partitions
for ($i = 0; $i < @parts; $i++) {
  if(exists($dos_ids{$fsid[$i]}) && !$xx{$i}) {
    push @xx, $i; $xx{$i} = 1;
  }
}

# then the rest
for ($i = 0; $i < @parts; $i++) {
  if(!$xx{$i}) { push @xx, $i; $xx{$i} = 1; }
}

# for (@xx) { print "$parts[$_] $fstypes[$_]\n" }

$found = "";
for $j (@xx) {
  $i = system "mount $parts[$j] /mnt 2>/dev/null";
  if(!$i) {
    @x = `df -Pk $parts[$j]`;
    if($x[-1] =~ /^\/\S+\s+(\d+)\s+\d+\s+(\d+)\s+/) {
        $part_free = $2 >> 10;
#      print "$parts[$j] $part_free\n";
      if((-f("/mnt/$img") || $part_free >= $minsize) && !(-f("/mnt/$img") && -s("/mnt/$img") <= 1)) {
        $found = $parts[$j];
        push @cfg, "part=$found\n";
        $t = sprintf "%d", $1 >> 10;
        push @cfg, "partsize=$t\n";
        push @cfg, "fstype=\"$fstypes[$j]\"\n";
        push @cfg, "dosdrive=C:\n" if defined($is_c) && $j == $is_c;
        $t = -f "/mnt/$img" ? $img : "";
        push @cfg, "suseimg=$t\n";
        $t = -f "/mnt/$swap" ? $swap : "";
        $swap_size = undef;
        $swap_size = (-s "/mnt/$swap") >> 20 if $t;
        push @cfg, "suseswap=$t\n";
        $t = -f "/mnt/$home" ? $home : "";
        $home_size = undef;
        $home_size = (-s "/mnt/$home") >> 20 if $t;
        push @cfg, "susehome=$t\n";
        ( $swap_size, $home_size ) = calc_sizes $part_free, $swap_size, $home_size;
        push @cfg, "swapsize=$swap_size\n";
        push @cfg, "homesize=$home_size\n";
      }
    }
  }
  system "umount /mnt 2>/dev/null";
  last if $found;
}

if($found) { print @cfg }


sub calc_sizes
{
  my ($part_free, $swap_size, $mem_size, $home_size);
  my ($t1, $t2, $scale);
  local $_;

  ( $part_free, $old_swap, $old_home ) = @_;

  if(defined($old_swap) && defined($old_home)) {
    return ( $old_swap, $old_home);
  }

  if(defined $old_swap) {
    $swap_size = $old_swap;
  }
  else {
    open P, "/proc/meminfo";
    $_ = (<P>)[1];
    close P;
    $mem_size = $1 >> 20 if /^Mem:\s+(\d+)/;
    $swap_size = 140 - $mem_size if $mem_size < 140;	# 100!
  }

  if(defined $old_home) {
    $home_size = $old_home;
  }
  else {
    $home_size = 100;
    $home_size = int($part_free / 2) if $part_free < 200;
  }

  if(defined $old_swap) {
    if($home_size < 10) { undef $home_size }
    return ( $swap_size, $home_size )
  }

  if(defined $old_home) {
    if($swap_size > $part_free - 20) {
      $swap_size = $part_free - 20;
    }
    if($swap_size < 10) { undef $swap_size }
    if($swap_size < $mem_size / 4) { undef $swap_size }
    return ( $swap_size, $home_size )
  }

  if($home_size + $swap_size > $part_free - 20) {
    $scale = ($home_size + $swap_size) / ($part_free - 20);
    $home_size = int($home_size / $scale);
    $swap_size = int($swap_size / $scale);
    if($home_size < 10) { undef $home_size }
    if($swap_size < 10) { undef $swap_size }
    if($swap_size < $mem_size / 4) { undef $swap_size }
  }

  return ( $swap_size, $home_size )
}

